import java.util.HashSet;
import java.util.Set;

public class E07Recursion {
	public static void main(String[] args) {
		combinations("Google", 3);
		Board board = new Board(8);
		queens(board, 8, 1);
		System.out.println(board);
	}
	
	// takes a string and a number as parameters
	// prints out all combinations of the unique letters in the
	// string that are the number long. 
	public static void combinations(String s, int k) {
		s = s.toUpperCase();
		Set<Character> letters = new HashSet<Character>();
		for(int i = 0; i < s.length(); i++) {
			letters.add(s.charAt(i));
		}
		String sNew = "";
		for(char letter : letters) {
			sNew += letter;
		}
		combinations(sNew, k, "");
	}
	
	// helper function for combinations(string, int)
	// takes a string, a number and a string to accumulate the result in as parameters
	// prints out all combinations of the unique letters in the first
	// string that are the number long. 
	public static void combinations(String s, int k, String result) {
		if(result.length() == k) {
			System.out.println(result);
		} else {
			for(int i = 0; i < s.length(); i++) {
				char c = s.charAt(i);
				result += c;
				String newS = s.substring(0, i) + s.substring(i + 1);
				combinations(newS, k, result);
				result = result.substring(0, result.length() - 1);
			}
		}
	}
	
	// takes a board, a number of queens to place and the current column as 
	// parameters. Returns true if there is a placement of the queens on the 
	// board that means none are in danger, false otherwise. At the end of the 
	// function the queens will be placed on the board in a valid configuration 
	// if it is possible.
	public static boolean queens(Board board, int queens, int col) {
		if(queens == 0) {
			// success!
			return true;
		} else {
			for(int i = 1; i <= 8; i++) {
				if(board.isSafe(i, col)) {
					board.place(i, col);
					boolean solution = queens(board, queens - 1, col + 1);
					if(solution) {
						return true;
					}
					board.remove(i, col);
				}
			}
			return false;
		}
	}
}
